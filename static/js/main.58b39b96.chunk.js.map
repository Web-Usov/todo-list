{"version":3,"sources":["entry/styles.tsx","entry/theme.tsx","pages/Home/styles.tsx","components/TodoList/styles.tsx","components/TodoList/components/task-actions.tsx","components/TodoList/components/task.tsx","components/TodoList/components/todo-list-actions.tsx","helpers/validator.ts","helpers/constants.ts","components/Dialog/confirm-dialog.tsx","components/Dialog/Form/FormModal.tsx","components/Dialog/Form/TextFieldAdapter.tsx","components/TodoList/components/todo-list-add-form.tsx","components/TodoList/components/todo-list-progress.tsx","components/TodoList/todo-list.tsx","hooks/useConfirmDialog.ts","hooks/useFormModal.ts","models/todo-list/todo-list-item.model.ts","store/todo-list/todo-list.store.ts","pages/Home/home.tsx","entry/Entry.tsx","entry/App.tsx","serviceWorker.ts","index.tsx"],"names":["AppContainer","styled","display","flexDirection","flex","height","backgroundColor","theme","palette","primary","main","createMuiTheme","HomeContainer","flexGrow","boxSizing","alignItems","justifyContent","padding","spacing","TodoListPaper","Paper","maxHeight","overflowY","TodoListContainer","maxWidth","width","TaskContainer","borderBottom","borderBottomColor","fade","light","marginBottom","boxShadow","shadows","TaskTitle","Typography","overflow","whiteSpace","textOverflow","marginRight","LinearProgressContainer","position","LinearProgressStyled","LinearProgress","borderRadius","success","color","borderColor","dark","LinearProgressTitle","top","StyledButton","Button","getContrastText","TodoListActionsStyled","TaskActions","onDelete","onFlag","isDone","onEdit","isEdit","style","flexShrink","IconButton","aria-label","onClick","fontSize","divider","Task","props","useState","setEdit","variant","opacity","title","TodoListActions","onAdd","createTaskValidator","values","errors","trim","Title","ConfirmDialog","Dialog","open","isOpen","onClose","handleCancel","aria-labelledby","aria-describedby","DialogTitle","disableTypography","id","DialogContent","DialogContentText","align","dialogContent","DialogActions","Fragment","handleConfirm","autoFocus","DialogTitleStyled","FormModal","handleClose","margin","form","withSendButton","handleSubmit","buttonSendText","TextFieldAdapter","input","meta","helperText","onChange","otherProps","showSubmitError","submitError","dirtySinceLastSubmit","showError","error","touched","TextField","event","useStules","makeStyles","titleInput","TodoListAddForm","setValues","a","classes","onSubmit","validate","initialValues","render","property","label","name","type","component","value","target","fullWidth","className","TodoListProgress","totalTasks","completedTask","observer","tasks","completedTasks","setOpen","setTitle","content","setContent","confirm","setConfirm","cancel","setCancel","useConfirmDialog","openDialog","closeDialog","React","createElement","send","setSend","useFormModal","isOpenForm","titleForm","contentForm","sendForm","openForm","closeForm","handleDelete","taskId","taskTtitle","handleFlag","handleEdit","length","map","item","key","TaskModel","types","model","identifier","optional","string","boolean","TodoListStore","array","views","self","filter","t","actions","add","task","push","uuid","remove","resolveIdentifier","destroy","flag","edit","afterCreate","autorun","localStorage","setItem","JSON","stringify","getSnapshot","cachedState","getItem","initialState","parse","create","todoListStore","Entery","App","ThemeProvider","Entry","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.58b39b96.chunk.js","sourcesContent":["import { styled } from \"@material-ui/core/styles\";\r\n\r\nexport const AppContainer = styled(\"div\")(({ theme }) => ({\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flex: 1,\r\n    height: \"100vh\",\r\n    backgroundColor: theme.palette.primary.main\r\n}));\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#0984e3\"\r\n        }\r\n    }\r\n});\r\nexport default theme;\r\n","import { styled } from \"@material-ui/core/styles\";\r\n\r\nexport const HomeContainer = styled(\"div\")(({ theme }) => ({\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    flexGrow: 1,\r\n    height: \"100%\",\r\n    boxSizing: \"border-box\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"start\",\r\n    padding: theme.spacing(5)\r\n}));\r\n","import { styled, fade } from \"@material-ui/core/styles\";\r\nimport { Paper, Button, Typography, LinearProgress } from \"@material-ui/core\";\r\n\r\n// Todo list\r\nexport const TodoListPaper = styled(Paper)(({ theme }) => ({\r\n    // maxWidth: 400,\r\n    // width: \"100%\",\r\n    padding: theme.spacing(3),\r\n    maxHeight: \"90%\",\r\n    overflowY: \"auto\",\r\n    flexGrow: 1\r\n}));\r\nexport const TodoListContainer = styled(\"div\")({\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"flex-start\",\r\n    flexGrow: 1,\r\n    maxHeight: \"100%\",\r\n    maxWidth: 500,\r\n    width: \"100%\"\r\n});\r\n\r\n// Todo list - task\r\nexport const TaskContainer = styled(\"div\")(({ theme }) => ({\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    borderBottom: \"solid 2px\",\r\n    borderBottomColor: fade(theme.palette.primary.light, 0.3),\r\n    marginBottom: 15,\r\n    padding: \"8px 10px\",\r\n    boxSizing: \"border-box\",\r\n    boxShadow: theme.shadows[1]\r\n}));\r\n\r\nexport const TaskTitle = styled(Typography)({\r\n    flexGrow: 1,\r\n    overflow: \"hidden\",\r\n    whiteSpace: \"nowrap\",\r\n    textOverflow: \"ellipsis\",\r\n    marginRight: 10\r\n});\r\n\r\n// Todo List - Linear Progress\r\nexport const LinearProgressContainer = styled(\"div\")({\r\n    marginBottom: \"15px\",\r\n    position: \"relative\"\r\n});\r\nexport const LinearProgressStyled = styled(LinearProgress)(({ theme }) => ({\r\n    height: 20,\r\n    borderRadius: \"5px\",\r\n    backgroundColor: theme.palette.success.light,\r\n    color: theme.palette.success.main,\r\n    borderColor: theme.palette.success.main,\r\n    \"& .MuiLinearProgress-barColorPrimary\": {\r\n        backgroundColor: theme.palette.success.dark\r\n    }\r\n}));\r\nexport const LinearProgressTitle = styled(Typography)({\r\n    position: \"absolute\",\r\n    top: 0,\r\n    width: \"100%\"\r\n});\r\n\r\n// Task form adding\r\nexport const StyledButton = styled(Button)(({ theme }) => ({\r\n    backgroundColor: theme.palette.success.light,\r\n    \"&:hover\": {\r\n        backgroundColor: theme.palette.success.dark\r\n    },\r\n    color: theme.palette.getContrastText(theme.palette.success.main)\r\n}));\r\n\r\nexport const TodoListActionsStyled = styled(\"div\")({\r\n    padding: 10\r\n});\r\n","import React, { ReactElement } from \"react\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckBoxOff from \"@material-ui/icons/CheckBoxOutlineBlank\";\r\nimport CheckBoxOn from \"@material-ui/icons/CheckBox\";\r\nimport theme from \"entry/theme\";\r\n\r\ninterface ITodoListItemActionsProps {\r\n    onFlag: () => void;\r\n    onDelete: () => void;\r\n    onEdit: (title: string) => void;\r\n    isEdit: boolean;\r\n    isDone: boolean;\r\n}\r\nexport const TaskActions = ({\r\n    onDelete,\r\n    onFlag,\r\n    onEdit,\r\n    isDone,\r\n    isEdit\r\n}: ITodoListItemActionsProps): ReactElement => {\r\n    return (\r\n        <div style={{ flexShrink: 0 }}>\r\n            <IconButton aria-label=\"Flag\" onClick={onFlag}>\r\n                {isDone ? (\r\n                    <CheckBoxOn\r\n                        fontSize=\"small\"\r\n                        style={{\r\n                            color: isDone\r\n                                ? theme.palette.success.main\r\n                                : theme.palette.divider\r\n                        }}\r\n                    />\r\n                ) : (\r\n                    <CheckBoxOff fontSize=\"small\" />\r\n                )}\r\n            </IconButton>\r\n            <IconButton aria-label=\"Delete\" onClick={onDelete}>\r\n                <DeleteIcon fontSize=\"small\" />\r\n            </IconButton>\r\n        </div>\r\n    );\r\n};\r\n","import React, { ReactElement, useState } from \"react\";\r\nimport { TaskContainer, TaskTitle } from \"../styles\";\r\nimport { styled } from \"@material-ui/core/styles\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { TaskActions } from \"./task-actions\";\r\nimport { ITodoListItem } from \"../types\";\r\n\r\ninterface ITodoListItemProps extends ITodoListItem {\r\n    onDelete: () => void;\r\n    onFlag: () => void;\r\n    onEdit: (title: string) => void;\r\n}\r\n\r\nexport const Task = (props: ITodoListItemProps): ReactElement => {\r\n    const [isEdit, setEdit] = useState<boolean>(false);\r\n    const handleEdit = (title: string): void => {\r\n        props.onEdit(title);\r\n        setEdit(false);\r\n    };\r\n    return (\r\n        <TaskContainer>\r\n            <TaskTitle\r\n                variant=\"h6\"\r\n                style={{\r\n                    opacity: props.isDone ? 0.3 : 1\r\n                }}\r\n            >\r\n                {props.title}\r\n            </TaskTitle>\r\n            <TaskActions {...props} isEdit={isEdit} onEdit={handleEdit} />\r\n        </TaskContainer>\r\n    );\r\n};\r\n","import React, { ReactElement } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { TodoListActionsStyled, StyledButton } from \"../styles\";\r\nimport { styled } from \"@material-ui/core/styles\";\r\nimport { ITodoListItemCreate } from \"../types\";\r\n\r\ninterface ITodoListActionsProps {\r\n    onAdd: (task: ITodoListItemCreate) => void;\r\n}\r\n\r\nconst TodoListActions = ({ onAdd }: ITodoListActionsProps): ReactElement => {\r\n    return (\r\n        <TodoListActionsStyled>\r\n            <StyledButton\r\n                variant=\"contained\"\r\n                onClick={() =>\r\n                    onAdd({\r\n                        title: \"loren ren loren \"\r\n                    })\r\n                }\r\n            >\r\n                Add\r\n            </StyledButton>\r\n        </TodoListActionsStyled>\r\n    );\r\n};\r\n\r\nexport default TodoListActions;\r\n","import { SubmissionErrors } from \"final-form\";\r\nimport {\r\n    FIELD_CANT_CONTAINS_ONLY_SPACES,\r\n    REQUIRED_FIELD\r\n} from \"helpers/constants\";\r\nimport { ITodoListItemCreate } from \"components/TodoList/types\";\r\nexport const createTaskValidator = (\r\n    values: ITodoListItemCreate\r\n): SubmissionErrors => {\r\n    const errors: SubmissionErrors = {};\r\n    if (!values.title) {\r\n        errors.title = REQUIRED_FIELD;\r\n    }\r\n    if (values.title && !values.title.trim()) {\r\n        errors.title = FIELD_CANT_CONTAINS_ONLY_SPACES;\r\n    }\r\n    return errors;\r\n};\r\n","export const REQUIRED_FIELD = \"This field was left empty\";\r\nexport const FIELD_CANT_CONTAINS_ONLY_SPACES =\r\n    \"This field cannot contain only spaces\";\r\nexport const ADD_TASK_TITLE = \"Add task\";\r\nexport const DELETE_TASK_TITLE = \"Delete task\";\r\nexport const DELETE_TASK_MESSAGE =\r\n    \"Are you sure you would like to delete current task?\";\r\nexport const TODO_LIST_EMPTY = \"You have not tasks\";\r\n","import React, { ReactElement } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { Typography, styled } from \"@material-ui/core\";\r\n\r\ninterface IProps {\r\n    isOpen: boolean;\r\n    title: string;\r\n    dialogContent: string;\r\n    handleConfirm?: () => void;\r\n    handleCancel?: () => void;\r\n}\r\n\r\nconst Title = styled(Typography)({\r\n    overflow: \"hidden\",\r\n    whiteSpace: \"nowrap\",\r\n    textOverflow: \"ellipsis\"\r\n});\r\n\r\nexport const ConfirmDialog = (props: IProps): ReactElement => {\r\n    return (\r\n        <Dialog\r\n            open={props.isOpen}\r\n            onClose={props.handleCancel}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle disableTypography id=\"alert-dialog-title\">\r\n                <Title variant=\"h6\">{props.title}</Title>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText\r\n                    id=\"alert-dialog-description\"\r\n                    align={\"center\"}\r\n                >\r\n                    {props.dialogContent}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <React.Fragment>\r\n                    <Button onClick={props.handleCancel} variant=\"contained\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        onClick={props.handleConfirm}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        autoFocus\r\n                    >\r\n                        Confirm\r\n                    </Button>\r\n                </React.Fragment>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n","import React, { ReactElement } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { IconButton, styled } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\ninterface IProps {\r\n    isOpen: boolean;\r\n    title: string;\r\n    form: ReactElement;\r\n    handleSubmit?: () => void;\r\n    handleClose?: () => void;\r\n    withSendButton?: boolean;\r\n    buttonSendText?: string;\r\n}\r\nconst DialogTitleStyled = styled(\"div\")({\r\n    display: \"flex\",\r\n    alignItems: \"start\"\r\n});\r\nexport const FormModal = (props: IProps): ReactElement => {\r\n    return (\r\n        <Dialog\r\n            open={props.isOpen}\r\n            onClose={props.handleClose}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitleStyled>\r\n                <DialogTitle id=\"alert-dialog-title\" style={{ flex: \"auto\" }}>\r\n                    {props.title}\r\n                </DialogTitle>\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={props.handleClose}\r\n                    style={{ margin: \"10px\" }}\r\n                >\r\n                    <CloseIcon fontSize=\"small\" />\r\n                </IconButton>\r\n            </DialogTitleStyled>\r\n            <DialogContent style={{ padding: \"24px\" }}>\r\n                {props.form}\r\n            </DialogContent>\r\n            {props.withSendButton && (\r\n                <DialogActions>\r\n                    <React.Fragment>\r\n                        <Button\r\n                            onClick={props.handleSubmit}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            autoFocus\r\n                        >\r\n                            {props.buttonSendText || \"Submit\"}\r\n                        </Button>\r\n                    </React.Fragment>\r\n                </DialogActions>\r\n            )}\r\n        </Dialog>\r\n    );\r\n};\r\n","import { FieldRenderProps } from \"react-final-form\";\r\nimport { TextFieldProps } from \"@material-ui/core/TextField\";\r\nimport React, { ReactElement } from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\n/**\r\n * Material UI Text Field Adapter for React Final Form Field\r\n * @param props\r\n * @constructor\r\n */\r\nexport const TextFieldAdapter = <TValues, V>(\r\n    props: FieldRenderProps<TValues> & TextFieldProps\r\n): ReactElement => {\r\n    const { input, meta, helperText, onChange, ...otherProps } = props;\r\n    const showSubmitError = meta.submitError && !meta.dirtySinceLastSubmit;\r\n    const showError = (showSubmitError || meta.error) && meta.touched;\r\n\r\n    const getHelperText = (): string => {\r\n        return meta.touched\r\n            ? meta.error || (showSubmitError && meta.submitError) || helperText\r\n            : helperText;\r\n    };\r\n\r\n    const handleOnChange = (\r\n        event: React.ChangeEvent<HTMLInputElement>\r\n    ): void => {\r\n        input.onChange(event);\r\n        onChange && onChange(event);\r\n    };\r\n\r\n    return (\r\n        <TextField\r\n            {...input}\r\n            {...otherProps}\r\n            error={showError}\r\n            helperText={getHelperText()}\r\n            onChange={handleOnChange}\r\n        />\r\n    );\r\n};\r\n","import React, { ReactElement, useState } from \"react\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport { Button, makeStyles } from \"@material-ui/core\";\r\nimport { createTaskValidator } from \"helpers/validator\";\r\nimport { ITodoListItemCreate } from \"../types\";\r\nimport { SubmissionErrors } from \"final-form\";\r\nimport { TextFieldAdapter } from \"components/Dialog\";\r\n\r\ninterface ITodoListAddFormProps {\r\n    onAdd: (values: ITodoListItemCreate) => void;\r\n}\r\nconst useStules = makeStyles({\r\n    titleInput: {\r\n        height: \"76px\",\r\n        marginBottom: \"20px\"\r\n    }\r\n});\r\n\r\nconst TodoListAddForm = ({ onAdd }: ITodoListAddFormProps): ReactElement => {\r\n    const [values, setValues] = useState<ITodoListItemCreate>({\r\n        title: \"\"\r\n    });\r\n    const handleSubmit = async (): Promise<void | SubmissionErrors> => {\r\n        onAdd(values);\r\n    };\r\n    const handleChange = (property: keyof ITodoListItemCreate): Function => (\r\n        event: React.ChangeEvent<HTMLInputElement>\r\n    ): void => {\r\n        setValues({ ...values, [property]: event.target.value });\r\n    };\r\n    const classes = useStules();\r\n    return (\r\n        <Form<ITodoListItemCreate>\r\n            onSubmit={handleSubmit}\r\n            validate={createTaskValidator}\r\n            initialValues={values}\r\n            render={({ handleSubmit }) => {\r\n                return (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Field<string>\r\n                            label=\"Title\"\r\n                            name=\"title\"\r\n                            type=\"text\"\r\n                            component={TextFieldAdapter}\r\n                            value={values.title}\r\n                            onChange={handleChange(\"title\")}\r\n                            fullWidth\r\n                            className={classes.titleInput}\r\n                        />\r\n\r\n                        <Button\r\n                            type=\"submit\"\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                        >\r\n                            Create\r\n                        </Button>\r\n                    </form>\r\n                );\r\n            }}\r\n        />\r\n    );\r\n};\r\nexport default TodoListAddForm;\r\n","import React, { ReactElement } from \"react\";\r\nimport {\r\n    LinearProgressContainer,\r\n    LinearProgressStyled,\r\n    LinearProgressTitle\r\n} from \"../styles\";\r\ninterface ITodoListProgressProps {\r\n    totalTasks: number;\r\n    completedTask: number;\r\n}\r\nexport const TodoListProgress = ({\r\n    totalTasks,\r\n    completedTask\r\n}: ITodoListProgressProps): ReactElement => {\r\n    const getValue = (): number => {\r\n        if (!totalTasks || !completedTask) return 0;\r\n        if (totalTasks < completedTask) return 0;\r\n\r\n        return (completedTask / totalTasks) * 100;\r\n    };\r\n    return (\r\n        <LinearProgressContainer>\r\n            <LinearProgressStyled variant=\"determinate\" value={getValue()} />\r\n            <LinearProgressTitle align=\"center\">{`${completedTask} / ${totalTasks}`}</LinearProgressTitle>\r\n        </LinearProgressContainer>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { TodoListPaper, TodoListContainer } from \"./styles\";\r\nimport { Task } from \"./components/task\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { observer } from \"mobx-react\";\r\nimport TodoListActions from \"./components/todo-list-actions\";\r\nimport TodoListAddForm from \"./components/todo-list-add-form\";\r\nimport { useConfirmDialog, useFormModal } from \"hooks\";\r\nimport { ConfirmDialog, FormModal } from \"components/Dialog\";\r\nimport { ITodoListItem, ITodoListItemCreate } from \"./types\";\r\nimport {\r\n    ADD_TASK_TITLE,\r\n    DELETE_TASK_TITLE,\r\n    DELETE_TASK_MESSAGE,\r\n    TODO_LIST_EMPTY\r\n} from \"helpers/constants\";\r\nimport { TodoListProgress } from \"./components/todo-list-progress\";\r\n\r\ninterface ITodoListProps {\r\n    tasks: ITodoListItem[];\r\n    completedTasks: ITodoListItem[];\r\n\r\n    onAdd: (task: ITodoListItemCreate) => void;\r\n    onDelete: (id: string) => void;\r\n    onFlag: (id: string) => void;\r\n    onEdit: (id: string, title: string) => void;\r\n}\r\n\r\nconst TodoList: React.FC<ITodoListProps> = ({\r\n    tasks,\r\n    completedTasks,\r\n    onAdd,\r\n    onDelete,\r\n    onFlag,\r\n    onEdit\r\n}: ITodoListProps) => {\r\n    const [\r\n        isOpen,\r\n        title,\r\n        content,\r\n        confirm,\r\n        openDialog,\r\n        closeDialog\r\n    ] = useConfirmDialog();\r\n\r\n    const [\r\n        isOpenForm,\r\n        titleForm,\r\n        contentForm,\r\n        sendForm,\r\n        openForm,\r\n        closeForm\r\n    ] = useFormModal<ITodoListItemCreate>();\r\n\r\n    const handleAdd = (): void => {\r\n        openForm(\r\n            ADD_TASK_TITLE,\r\n            <TodoListAddForm\r\n                onAdd={(values?: ITodoListItemCreate) => {\r\n                    closeForm();\r\n                    values && onAdd(values);\r\n                }}\r\n            />,\r\n            (values?: ITodoListItemCreate) => {\r\n                closeForm();\r\n                values && onAdd(values);\r\n            }\r\n        );\r\n    };\r\n\r\n    const handleDelete = (taskId: string, taskTtitle?: string): void => {\r\n        openDialog(\r\n            taskTtitle\r\n                ? `${DELETE_TASK_TITLE} \"${taskTtitle}\"`\r\n                : DELETE_TASK_TITLE,\r\n            DELETE_TASK_MESSAGE,\r\n            () => {\r\n                closeDialog();\r\n                onDelete(taskId);\r\n            }\r\n        );\r\n    };\r\n\r\n    const handleFlag = (id: string): void => {\r\n        onFlag(id);\r\n    };\r\n\r\n    const handleEdit = (id: string, title: string): void => {\r\n        onEdit(id, title);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TodoListContainer>\r\n                <TodoListPaper>\r\n                    {!tasks.length ? (\r\n                        <Typography align=\"center\">\r\n                            {TODO_LIST_EMPTY}\r\n                        </Typography>\r\n                    ) : (\r\n                        <div>\r\n                            <TodoListProgress\r\n                                totalTasks={tasks.length}\r\n                                completedTask={completedTasks.length}\r\n                            />\r\n                            {tasks.map((item, id) => (\r\n                                <Task\r\n                                    key={id}\r\n                                    {...item}\r\n                                    onDelete={() =>\r\n                                        handleDelete(item.id, item.title)\r\n                                    }\r\n                                    onFlag={() => handleFlag(item.id)}\r\n                                    onEdit={(title: string) =>\r\n                                        handleEdit(item.id, title)\r\n                                    }\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </TodoListPaper>\r\n                <TodoListActions onAdd={handleAdd} />\r\n            </TodoListContainer>\r\n            <ConfirmDialog\r\n                isOpen={isOpen}\r\n                title={title}\r\n                dialogContent={content}\r\n                handleConfirm={confirm}\r\n                handleCancel={closeDialog}\r\n            />\r\n            <FormModal\r\n                isOpen={isOpenForm}\r\n                title={titleForm}\r\n                form={contentForm}\r\n                handleSubmit={sendForm}\r\n                handleClose={closeForm}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default observer(TodoList);\r\n","import { useState } from \"react\";\r\n\r\ntype TConfirmDialogHook = [\r\n    boolean,\r\n    string,\r\n    string,\r\n    () => void,\r\n    (\r\n        title: string,\r\n        content: string,\r\n        confirm: () => void,\r\n        cancel?: () => void\r\n    ) => void,\r\n    () => void\r\n];\r\n\r\nexport const useConfirmDialog = (): TConfirmDialogHook => {\r\n    const [isOpen, setOpen] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [content, setContent] = useState<string>(\"\");\r\n    const [confirm, setConfirm] = useState<() => void>(() => {});\r\n    const [cancel, setCancel] = useState<() => void>(() => {});\r\n\r\n    const openDialog = (\r\n        title: string,\r\n        content: string,\r\n        confirm: () => void,\r\n        cancel?: () => void\r\n    ): void => {\r\n        setTitle(title);\r\n        setContent(content);\r\n        setConfirm(() => confirm);\r\n        if (cancel) setCancel(() => cancel);\r\n        setOpen(true);\r\n    };\r\n\r\n    const closeDialog = (): void => {\r\n        setOpen(false);\r\n        if (cancel) cancel();\r\n    };\r\n\r\n    return [isOpen, title, content, confirm, openDialog, closeDialog];\r\n};\r\n","import React, { useState, ReactElement } from \"react\";\r\n\r\ntype TFormModalHook<T> = [\r\n    boolean,\r\n    string,\r\n    ReactElement,\r\n    (values?: T) => void,\r\n    (\r\n        title: string,\r\n        content: ReactElement,\r\n        send: (values?: T) => void,\r\n        cancel?: () => void\r\n    ) => void,\r\n    () => void\r\n];\r\nexport const useFormModal = <TValues>(): TFormModalHook<TValues> => {\r\n    const [isOpen, setOpen] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [content, setContent] = useState<ReactElement>(\r\n        React.createElement(React.Fragment)\r\n    );\r\n    const [send, setSend] = useState<(values?: TValues) => void>(() => {});\r\n    const [cancel, setCancel] = useState<() => void>(() => {});\r\n\r\n    const openDialog = (\r\n        title: string,\r\n        content: ReactElement,\r\n        send: (values?: TValues) => void,\r\n        cancel?: () => void\r\n    ): void => {\r\n        setTitle(title);\r\n        setContent(content);\r\n        setSend(() => send);\r\n        if (cancel) setCancel(() => cancel);\r\n        setOpen(true);\r\n    };\r\n\r\n    const closeDialog = (): void => {\r\n        setOpen(false);\r\n        if (cancel) cancel();\r\n    };\r\n\r\n    return [isOpen, title, content, send, openDialog, closeDialog];\r\n};\r\n","import { Instance, types } from \"mobx-state-tree\";\r\nconst TaskModel = types.model({\r\n    id: types.identifier,\r\n    title: types.optional(types.string, \"\"),\r\n    isDone: types.optional(types.boolean, false)\r\n});\r\n\r\nexport type TTaskModel = Instance<typeof TaskModel>;\r\n\r\nexport default TaskModel;\r\n","import {\r\n    types,\r\n    destroy,\r\n    resolveIdentifier,\r\n    getSnapshot\r\n} from \"mobx-state-tree\";\r\nimport TaskModel, { TTaskModel } from \"models/todo-list/todo-list-item.model\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { autorun } from \"mobx\";\r\n\r\nconst TodoListStore = types\r\n    .model(\"TodoListStore\", {\r\n        tasks: types.optional(types.array(TaskModel), [])\r\n    })\r\n    .views(self => ({\r\n        get completedTasks(): TTaskModel[] {\r\n            return self.tasks.filter(t => t.isDone);\r\n        }\r\n    }))\r\n    .actions(self => ({\r\n        add: (task: Partial<TTaskModel>) => {\r\n            self.tasks.push({ ...task, id: uuid() });\r\n        },\r\n        remove: (id: string) => {\r\n            const task = resolveIdentifier(TaskModel, self.tasks, id);\r\n            if (task) destroy(task);\r\n        },\r\n        flag: (id: string) => {\r\n            const task = resolveIdentifier(TaskModel, self.tasks, id);\r\n            if (task) task.isDone = !task.isDone;\r\n        },\r\n        edit: (id: string, title: string) => {\r\n            const task = resolveIdentifier(TaskModel, self.tasks, id);\r\n            if (task) task.title = title;\r\n        }\r\n    }))\r\n    .actions(self => ({\r\n        afterCreate() {\r\n            autorun(() => {\r\n                localStorage.setItem(\r\n                    TodoListStore.name,\r\n                    JSON.stringify(getSnapshot(self))\r\n                );\r\n            });\r\n        }\r\n    }));\r\n\r\nconst cachedState = localStorage.getItem(TodoListStore.name);\r\nconst initialState = cachedState ? JSON.parse(cachedState) : {};\r\nexport default TodoListStore.create(initialState);\r\n","import React from \"react\";\r\nimport { HomeContainer } from \"./styles\";\r\nimport TodoList from \"components/TodoList\";\r\nimport todoListStore from \"store/todo-list\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Typography, styled } from \"@material-ui/core\";\r\n\r\nconst Title = styled(Typography)({\r\n    marginBottom: 10,\r\n    width: \"100%\",\r\n    color: \"#ffffff\"\r\n});\r\n\r\nconst HomePage: React.FC = () => {\r\n    return (\r\n        <HomeContainer>\r\n            <Title variant=\"h4\" display=\"block\">\r\n                Todo List\r\n            </Title>\r\n            <TodoList\r\n                completedTasks={todoListStore.completedTasks}\r\n                tasks={todoListStore.tasks}\r\n                onAdd={todoListStore.add}\r\n                onDelete={todoListStore.remove}\r\n                onFlag={todoListStore.flag}\r\n                onEdit={todoListStore.edit}\r\n            />\r\n        </HomeContainer>\r\n    );\r\n};\r\n\r\nexport default observer(HomePage);\r\n","import React from \"react\";\r\nimport HomePage from \"pages/Home\";\r\n\r\nconst Entery: React.FC = () => {\r\n    return <HomePage />;\r\n};\r\n\r\nexport default Entery;\r\n","import React from \"react\";\r\n\r\nimport { AppContainer } from \"./styles\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport theme from \"./theme\";\r\nimport Entry from \"./Entry\";\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <AppContainer>\r\n                <Entry />\r\n            </AppContainer>\r\n        </ThemeProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nconst registerValidSW = (swUrl: string, config?: Config): void => {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n};\r\n\r\nconst checkValidServiceWorker = (swUrl: string, config?: Config): void => {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    // eslint-disable-next-line no-undef\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null &&\r\n                    contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n};\r\n\r\nexport const register = (config?: Config): void => {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n};\r\nexport const unregister = (): void => {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./entry/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}